{"ast":null,"code":"import _asyncToGenerator from \"E:\\\\Courses\\\\ITI\\\\Courses\\\\15- Angular\\\\Project\\\\Source Control\\\\CMS-system\\\\client\\\\app-client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PatientService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"assets/test_data/patient.json\";\n    let data = [];\n    this.getAllPatients().subscribe({\n      next: pts => {\n        data = pts;\n      },\n      complete: () => PatientService.allPatients = data\n    });\n  }\n\n  getAllPatients() {\n    return this.http.get(this.baseUrl).pipe(tap(obs => console.log(obs)));\n  }\n\n  getPatientById(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const resp = yield (yield fetch(_this.baseUrl)).json();\n      console.warn(resp);\n      return resp[id - 1]; // return this.http.get<Patient[]>(this.baseUrl).pipe(\n      //   tap((obs)=>console.log(obs)),\n      // );\n    })();\n  }\n\n  addPatient(newPatient) {\n    return this.http.post(this.baseUrl, newPatient);\n  }\n\n  editPatient(ePatient) {\n    return this.http.put(this.baseUrl, ePatient);\n  }\n\n  removePatient(rPatient) {\n    return this.http.delete(this.baseUrl + \"/\" + rPatient._id);\n  }\n\n}\nPatientService.allPatients = [];\n\nPatientService.ɵfac = function PatientService_Factory(t) {\n  return new (t || PatientService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nPatientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PatientService,\n  factory: PatientService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:/Courses/ITI/Courses/15- Angular/Project/Source Control/CMS-system/client/app-client/src/app/Employee/services/patient.service.ts"],"names":["tap","i0","i1","PatientService","constructor","http","baseUrl","data","getAllPatients","subscribe","next","pts","complete","allPatients","get","pipe","obs","console","log","getPatientById","id","resp","fetch","json","warn","addPatient","newPatient","post","editPatient","ePatient","put","removePatient","rPatient","delete","_id","ɵfac","PatientService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,QAAoB,MAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAe,+BAAf;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,SAAKC,cAAL,GAAsBC,SAAtB,CAAgC;AAC5BC,MAAAA,IAAI,EAAEC,GAAG,IAAI;AAAEJ,QAAAA,IAAI,GAAGI,GAAP;AAAa,OADA;AAE5BC,MAAAA,QAAQ,EAAE,MAAMT,cAAc,CAACU,WAAf,GAA6BN;AAFjB,KAAhC;AAIH;;AACDC,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKH,IAAL,CAAUS,GAAV,CAAc,KAAKR,OAAnB,EAA4BS,IAA5B,CAAiCf,GAAG,CAAEgB,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAV,CAApC,CAAP;AACH;;AACKG,EAAAA,cAAc,CAACC,EAAD,EAAK;AAAA;;AAAA;AACrB,YAAMC,IAAI,SAAS,OAAOC,KAAK,CAAC,KAAI,CAAChB,OAAN,CAAZ,EAA4BiB,IAA5B,EAAnB;AACAN,MAAAA,OAAO,CAACO,IAAR,CAAaH,IAAb;AACA,aAAOA,IAAI,CAACD,EAAE,GAAG,CAAN,CAAX,CAHqB,CAIrB;AACA;AACA;AANqB;AAOxB;;AACDK,EAAAA,UAAU,CAACC,UAAD,EAAa;AACnB,WAAO,KAAKrB,IAAL,CAAUsB,IAAV,CAAe,KAAKrB,OAApB,EAA6BoB,UAA7B,CAAP;AACH;;AACDE,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,WAAO,KAAKxB,IAAL,CAAUyB,GAAV,CAAc,KAAKxB,OAAnB,EAA4BuB,QAA5B,CAAP;AACH;;AACDE,EAAAA,aAAa,CAACC,QAAD,EAAW;AACpB,WAAO,KAAK3B,IAAL,CAAU4B,MAAV,CAAiB,KAAK3B,OAAL,GAAe,GAAf,GAAqB0B,QAAQ,CAACE,GAA/C,CAAP;AACH;;AA7BuB;AA+B5B/B,cAAc,CAACU,WAAf,GAA6B,EAA7B;;AACAV,cAAc,CAACgC,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAIlC,cAAV,EAA0BF,EAAE,CAACqC,QAAH,CAAYpC,EAAE,CAACqC,UAAf,CAA1B,CAAP;AAA+D,CAA1H;;AACApC,cAAc,CAACqC,KAAf,GAAuB,aAAcvC,EAAE,CAACwC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEvC,cAAT;AAAyBwC,EAAAA,OAAO,EAAExC,cAAc,CAACgC,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import { tap } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class PatientService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.baseUrl = \"assets/test_data/patient.json\";\r\n        let data = [];\r\n        this.getAllPatients().subscribe({\r\n            next: pts => { data = pts; },\r\n            complete: () => PatientService.allPatients = data\r\n        });\r\n    }\r\n    getAllPatients() {\r\n        return this.http.get(this.baseUrl).pipe(tap((obs) => console.log(obs)));\r\n    }\r\n    async getPatientById(id) {\r\n        const resp = await (await fetch(this.baseUrl)).json();\r\n        console.warn(resp);\r\n        return resp[id - 1];\r\n        // return this.http.get<Patient[]>(this.baseUrl).pipe(\r\n        //   tap((obs)=>console.log(obs)),\r\n        // );\r\n    }\r\n    addPatient(newPatient) {\r\n        return this.http.post(this.baseUrl, newPatient);\r\n    }\r\n    editPatient(ePatient) {\r\n        return this.http.put(this.baseUrl, ePatient);\r\n    }\r\n    removePatient(rPatient) {\r\n        return this.http.delete(this.baseUrl + \"/\" + rPatient._id);\r\n    }\r\n}\r\nPatientService.allPatients = [];\r\nPatientService.ɵfac = function PatientService_Factory(t) { return new (t || PatientService)(i0.ɵɵinject(i1.HttpClient)); };\r\nPatientService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PatientService, factory: PatientService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}